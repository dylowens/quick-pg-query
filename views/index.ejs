<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Philosopher Database</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background-color: #f0f2f5;
        }
        h1 {
            color: #333;
            text-align: center;
        }
        form { 
            margin-bottom: 20px; 
            display: flex;
            justify-content: center;
        }
        .search-container {
            display: flex;
            max-width: 500px;
            width: 100%;
        }
        input[type="text"] { 
            flex-grow: 1;
            padding: 10px 15px; 
            border: 1px solid #ddd;
            border-radius: 20px 0 0 20px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
        }
        input[type="text"]:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
        }
        button { 
            padding: 10px 20px; 
            background-color: #4CAF50; 
            color: white; 
            border: none; 
            border-radius: 0 20px 20px 0;
            cursor: pointer; 
            font-size: 16px;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #45a049;
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            background-color: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            margin-bottom: 20px;
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 12px; 
            text-align: left; 
        }
        th { 
            background-color: #f8f8f8; 
            font-weight: bold;
            color: #333;
        }
        .error { 
            color: #d32f2f; 
            text-align: center;
            margin-bottom: 10px;
        }
        #allPhilosophers ul {
            column-count: 3;
            column-gap: 20px;
            list-style-type: none;
            padding: 0;
        }
        #allPhilosophers li {
            margin-bottom: 5px;
        }
        #allTheories ul {
            column-count: 3;
            column-gap: 20px;
            list-style-type: none;
            padding: 0;
        }
        #allTheories li {
            margin-bottom: 5px;
        }
        .theory-search-container {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>Philosopher Database</h1>
    
    <!-- Buttons stacked vertically -->
    <button id="listAllBtn" style="margin-bottom: 20px;">List All Philosophers</button>
    <br>
    <button id="listAllTheoriesBtn" style="margin-bottom: 20px;">List All Theories</button>

    <!-- Replace the two separate search forms with this single form -->
    <form id="combinedSearchForm">
        <div class="search-container">
            <input type="text" id="searchTerm" placeholder="Enter philosopher's name or theory..." required>
            <button type="submit">Search</button>
        </div>
    </form>
    
    <!-- Remove the separate allPhilosophers and allTheories divs -->
    <div id="results"></div>

    <div id="error" class="error"></div>

    <script>
        function displayPhilosophers(philosophers, targetDiv, showDetails = true) {
            if (philosophers.length === 0) {
                targetDiv.innerHTML = '<p>No results found.</p>';
            } else if (!showDetails) {
                let listHtml = '<div style="column-count: 3; column-gap: 20px;"><ul style="list-style-type: none; padding: 0;">';
                philosophers.forEach(philosopher => {
                    listHtml += `<li>• ${philosopher.name}</li>`;
                });
                listHtml += '</ul></div>';
                targetDiv.innerHTML = listHtml;
            } else {
                let tableHtml = `
                    <table>
                        <tr>
                            <th>Name</th>
                            <th>Theory</th>
                            <th>Category</th>
                        </tr>
                `;
                philosophers.forEach(philosopher => {
                    tableHtml += `
                        <tr>
                            <td>${philosopher.name}</td>
                            <td>${philosopher.theory || 'N/A'}</td>
                            <td>${philosopher.category || 'N/A'}</td>
                        </tr>
                    `;
                });
                tableHtml += '</table>';
                targetDiv.innerHTML = tableHtml;
            }
        }

        function displayTheories(theories, targetDiv, showDetails = true) {
            if (theories.length === 0) {
                targetDiv.innerHTML = '<p>No results found.</p>';
            } else if (!showDetails) {
                let listHtml = '<div style="column-count: 3; column-gap: 20px;"><ul style="list-style-type: none; padding: 0;">';
                theories.forEach(theory => {
                    listHtml += `<li>• ${theory.theory} (${theory.category || 'N/A'})</li>`;
                });
                listHtml += '</ul></div>';
                targetDiv.innerHTML = listHtml;
            } else {
                let tableHtml = `
                    <table>
                        <tr>
                            <th>Theory</th>
                            <th>Category</th>
                            <th>Philosophers</th>
                        </tr>
                `;
                theories.forEach(theory => {
                    tableHtml += `
                        <tr>
                            <td>${theory.theory}</td>
                            <td>${theory.category || 'N/A'}</td>
                            <td>${theory.philosophers ? theory.philosophers.join(', ') : 'N/A'}</td>
                        </tr>
                    `;
                });
                tableHtml += '</table>';
                targetDiv.innerHTML = tableHtml;
            }
        }

        // Add this new function to fetch all philosophers and theories
        async function fetchAllPhilosophersAndTheories() {
            const [philosophersResponse, theoriesResponse] = await Promise.all([
                fetch('/all-philosophers'),
                fetch('/all-theories')
            ]);
            const philosophers = await philosophersResponse.json();
            const theories = await theoriesResponse.json();
            return {
                philosophers: philosophers.map(p => p.name.toLowerCase()),
                theories: theories.map(t => t.theory.toLowerCase())
            };
        }

        // Cache for philosophers and theories
        let allItems;

        // Fetch all philosophers and theories when the page loads
        fetchAllPhilosophersAndTheories().then(items => {
            allItems = items;
        });

        // Update the combined search form event listener
        document.getElementById('combinedSearchForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const searchInput = document.getElementById('searchTerm');
            const searchTerm = searchInput.value.toLowerCase();
            const errorDiv = document.getElementById('error');
            const resultsDiv = document.getElementById('results');

            if (!allItems) {
                allItems = await fetchAllPhilosophersAndTheories();
            }

            let endpoint, body;

            if (allItems.philosophers.includes(searchTerm)) {
                endpoint = '/search-philosophers';
                body = JSON.stringify({ name: searchTerm });
            } else if (allItems.theories.includes(searchTerm)) {
                endpoint = '/search-theories';
                body = JSON.stringify({ theory: searchTerm });
            } else {
                // If the term is not found in either list, default to searching philosophers
                endpoint = '/search-philosophers';
                body = JSON.stringify({ name: searchTerm });
            }

            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: body
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                errorDiv.textContent = '';
                
                if (endpoint === '/search-philosophers') {
                    displayPhilosophers(data, resultsDiv);
                } else {
                    displayTheories(data, resultsDiv);
                }
            } catch (error) {
                console.error('Error:', error);
                errorDiv.textContent = 'An error occurred while searching. Please try again.';
                resultsDiv.innerHTML = '';
            } finally {
                // Clear the search input and keep focus
                searchInput.value = '';
                searchInput.focus();
            }
        });

        async function listAllPhilosophers() {
            const errorDiv = document.getElementById('error');
            const resultsDiv = document.getElementById('results');

            // Clear search results
            resultsDiv.innerHTML = '';

            try {
                const response = await fetch('/all-philosophers');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                let philosophers = await response.json();
                philosophers = Array.from(new Set(philosophers.map(p => p.name)))
                    .map(name => ({ name }));
                philosophers.sort((a, b) => a.name.localeCompare(b.name));
                errorDiv.textContent = '';
                displayPhilosophers(philosophers, resultsDiv, false);
            } catch (error) {
                console.error('Error:', error);
                errorDiv.textContent = 'An error occurred while fetching all philosophers. Please try again.';
                resultsDiv.innerHTML = '';
            }
        }

        async function listAllTheories() {
            const errorDiv = document.getElementById('error');
            const resultsDiv = document.getElementById('results');

            // Clear search results
            resultsDiv.innerHTML = '';

            try {
                const response = await fetch('/all-theories');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const theories = await response.json();
                errorDiv.textContent = '';
                displayTheories(theories, resultsDiv, false);
            } catch (error) {
                console.error('Error:', error);
                errorDiv.textContent = 'An error occurred while fetching all theories. Please try again.';
                resultsDiv.innerHTML = '';
            }
        }

        // Add event listeners for both buttons
        document.getElementById('listAllBtn').addEventListener('click', listAllPhilosophers);
        document.getElementById('listAllTheoriesBtn').addEventListener('click', listAllTheories);
    </script>
</body>
</html>
